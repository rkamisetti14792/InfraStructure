AWSTemplateFormatVersion: 2010-09-09
Description: My Architecture with CloudFormation
Parameters:
  NameOfService:
    Description: Name of the service this stack
    Type: String
  KeyName:
    Description: Choose Keypair for Resource Access
    Type: AWS::EC2::KeyPair::KeyName 
    ConstraintDescription: Must be an existing keypair
  ENVIRONMENT:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - PROD
      - PRESALES
  VPCCIDR:
    Description: A VPC is an isolated portion of the AWS cloud.
    Type: String
    Default: 192.168.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
  PublicSubnetARange:
    Description: Publicly Access Resources
    Type: String
    Default: 192.168.1.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
  PublicSubnetBRange:
    Description: Publicly Access Resources
    Type: String
    Default: 192.168.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
  PrivateSubnetARange:
    Description: Private Access Resources
    Type: String
    Default: 192.168.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
  PrivateSubnetBRange:
    Description: Private Access Resources
    Type: String
    Default: 192.168.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
Conditions:
  IsDev:
    !Equals [!Ref ENVIRONMENT, DEV]
  IsTest:
    !Equals [!Ref ENVIRONMENT, TEST]
  IsProd:
    !Equals [!Ref ENVIRONMENT, PROD]
Mappings:   
  RegionMap: 
    us-east-1:
      "AMILINUX"  : "ami-04681a1dbd79675a5" 
    us-east-2:
      "AMILINUX"  : "ami-0b59bfac6be064b78" 
    us-west-1:
      "AMILINUX"  : "ami-0782017a917e973e7" 
    us-west-2:
      "AMILINUX"  : "ami-6cd6f714" 
  InstanceSize:
    DEV:
      "EC2" : "t2.micro"
    TEST:
      "EC2" : "t2.micro"
    PROD:
      "EC2" : "t2.small"
    PRESALES:
      "EC2" : "t2.micro"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: MyDefaultVPC
          Value: DefaultVPC
  InternetNetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: DefaultIGW
          Value: ToVPC
  IGWAttachtoVPC:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetNetGateway
      VpcId: !Ref VPC
  PubSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref PublicSubnetARange
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PrvSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnetARange
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PubSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref PublicSubnetBRange
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PrvSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnetBRange
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PubRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PubRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetNetGateway
      RouteTableId: !Ref PubRouteTable
  PubRouteAssociateA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnetA
  PubRouteAssociateB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnetB
  EIPA:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NATGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPA.AllocationId
      SubnetId: !Ref PubSubnetA
  PrvRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PrvRouteA:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
      RouteTableId: !Ref PrvRouteTableA
  PrvRouteAssociateA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrvRouteTableA
      SubnetId: !Ref PrvSubnetA
  EIPB:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NATGatewayB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPB.AllocationId
      SubnetId: !Ref PubSubnetB
  PrvRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrvRouteB:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
      RouteTableId: !Ref PrvRouteTableB
  PrvRouteAssociateB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrvRouteTableB
      SubnetId: !Ref PrvSubnetB
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: MySecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
  Ec2InstancePubA:
    Type: "AWS::EC2::Instance"
    Metadata: 
      AWS::CloudFormation::Init:
        configSets: 
          installcloudinit:
            - install_cfn
            - install_packages
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource Ec2InstancePubA '
                  - '         --configsets installcloudinit '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages: 
            yum:
              httpd: []
              php: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
            /var/www/html/index.html:
              content:
                Hello!Welcome
              mode: "000400"
              owner: root
              group: root
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMILINUX] 
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PubSubnetA
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstancePubA --configsets installcloudinit --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2InstancePubA --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  Ec2InstancePrvA:
    Type: "AWS::EC2::Instance"
    Metadata: 
      AWS::CloudFormation::Init:
        configSets: 
          installcloudinit:
            - install_cfn
            - install_packages
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource Ec2InstancePrvA '
                  - '         --configsets installcloudinit '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          /var/www/html/index.html:
              content:
                Hello!Welcome
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages: 
            yum:
              httpd: []
              php: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMILINUX] 
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PrvSubnetA
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstancePrvA --configsets installcloudinit --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2InstancePrvA --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  Ec2InstancePubB:
    Type: "AWS::EC2::Instance"
    Metadata: 
      AWS::CloudFormation::Init:
        configSets: 
          installcloudinit:
            - install_cfn
            - install_packages
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource Ec2InstancePubB '
                  - '         --configsets installcloudinit '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /var/www/html/index.html:
              content:
                Hello!Welcome
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages: 
            yum:
              httpd: []
              php: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMILINUX] 
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PubSubnetB
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstancePubB --configsets installcloudinit --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2InstancePubB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  Ec2InstancePrvB:
    Type: "AWS::EC2::Instance"
    Metadata: 
      AWS::CloudFormation::Init:
        configSets: 
          installcloudinit:
            - install_cfn
            - install_packages
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource Ec2InstancePrvB '
                  - '         --configsets installcloudinit '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /var/www/html/index.html:
              content:
                Hello!Welcome
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages: 
            yum:
              httpd: []
              php: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMILINUX] 
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PrvSubnetB
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstancePrvB --configsets installcloudinit --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2InstancePrvB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: true
      Instances:
        - !Ref Ec2InstancePubA
        - !Ref Ec2InstancePubB
      Listeners:
        - InstancePort: "80"
          InstanceProtocol: HTTP
          LoadBalancerPort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Subnets:
        - !Ref PubSubnetA
        - !Ref PubSubnetB
      SecurityGroups:
        - !Ref SecurityGroup
Outputs:
  Endpoint:
    Description: The Public DNS for the EC2 Instance
    Value: !Join ["", ["http://", !GetAtt ELB.DNSName, "/index.php"]]
